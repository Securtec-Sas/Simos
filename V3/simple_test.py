#!/usr/bin/env python3
"""
Script de prueba simplificado para el sistema de simulaci√≥n V3
Sin dependencias externas complejas
"""

import sys
import os
import asyncio
import json
from datetime import datetime

# Agregar el directorio V3 al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Prueba las importaciones b√°sicas"""
    print("üîç Probando importaciones...")
    
    try:
        from shared.config_v3 import ADVANCED_SIMULATION_CONFIG
        print("‚úÖ Configuraci√≥n importada correctamente")
        
        # Mostrar configuraci√≥n
        print(f"üìã Configuraci√≥n de simulaci√≥n:")
        for key, value in ADVANCED_SIMULATION_CONFIG.items():
            print(f"   {key}: {value}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en importaciones: {e}")
        return False

def test_simulation_config():
    """Prueba la configuraci√≥n de simulaci√≥n"""
    print("\nüîß Probando configuraci√≥n de simulaci√≥n...")
    
    try:
        from shared.config_v3 import ADVANCED_SIMULATION_CONFIG
        
        # Verificar configuraciones requeridas
        required_keys = [
            'initial_balance',
            'time_between_transfers_seconds',
            'simulation_duration_minutes',
            'max_concurrent_operations',
            'ai_confidence_threshold'
        ]
        
        missing_keys = []
        for key in required_keys:
            if key not in ADVANCED_SIMULATION_CONFIG:
                missing_keys.append(key)
        
        if missing_keys:
            print(f"‚ùå Faltan configuraciones: {missing_keys}")
            return False
        
        print("‚úÖ Todas las configuraciones requeridas est√°n presentes")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_websocket_integration():
    """Prueba la integraci√≥n con WebSocket"""
    print("\nüåê Probando integraci√≥n WebSocket...")
    
    try:
        from main_v3 import CryptoArbitrageV3
        
        # Verificar que la clase principal existe
        print("‚úÖ Clase CryptoArbitrageV3 encontrada")
        
        # Verificar que el motor de simulaci√≥n avanzado est√° importado
        try:
            from core.advanced_simulation_engine import AdvancedSimulationEngine, SimulationMode
            print("‚úÖ Motor de simulaci√≥n avanzado importado correctamente")
        except ImportError as e:
            print(f"‚ùå Error importando motor de simulaci√≥n: {e}")
            return False
        
        # Verificar que los handlers de simulaci√≥n est√°n implementados
        simulation_methods = [
            '_handle_start_simulation',
            '_handle_stop_simulation',
            '_handle_get_simulation_status'
        ]
        
        missing_methods = []
        for method in simulation_methods:
            if not hasattr(CryptoArbitrageV3, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå Faltan m√©todos: {missing_methods}")
            return False
        
        print("‚úÖ Todos los m√©todos de simulaci√≥n est√°n implementados")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n WebSocket: {e}")
        return False

def test_simulation_modes():
    """Prueba los modos de simulaci√≥n disponibles"""
    print("\nüéØ Probando modos de simulaci√≥n...")
    
    try:
        # Importar sin pandas
        import importlib.util
        
        # Cargar el m√≥dulo sin ejecutar pandas
        spec = importlib.util.spec_from_file_location(
            "advanced_simulation_engine", 
            "core/advanced_simulation_engine.py"
        )
        
        if spec is None:
            print("‚ùå No se pudo cargar el m√≥dulo de simulaci√≥n")
            return False
        
        print("‚úÖ M√≥dulo de simulaci√≥n encontrado")
        
        # Verificar que los archivos de simulaci√≥n existen
        current_dir = os.getcwd()
        print(f"üìÅ Directorio actual: {current_dir}")
        
        if current_dir.endswith('V3'):
            # Estamos en V3, usar rutas relativas
            simulation_files = [
                'core/advanced_simulation_engine.py',
                'shared/config_v3.py',
                'main_v3.py'
            ]
        else:
            # Estamos en el directorio ra√≠z
            simulation_files = [
                'V3/core/advanced_simulation_engine.py',
                'V3/shared/config_v3.py',
                'V3/main_v3.py'
            ]
        
        for file_path in simulation_files:
            if not os.path.exists(file_path):
                print(f"‚ùå Archivo faltante: {file_path}")
                return False
        
        print("‚úÖ Todos los archivos de simulaci√≥n est√°n presentes")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en modos de simulaci√≥n: {e}")
        return False

def test_ui_integration():
    """Prueba la integraci√≥n con la UI"""
    print("\nüñ•Ô∏è Probando integraci√≥n con UI...")
    
    try:
        # Cambiar las rutas relativas para que funcionen desde el directorio V3
        ui_files = [
            '../UI/clients/src/components/SimulationPage/SimulationPage.jsx',
            '../UI/clients/src/components/SimulationPage/SimulationPage.css'
        ]
        
        # Verificar si estamos en el directorio correcto
        current_dir = os.getcwd()
        print(f"üìÅ Directorio actual: {current_dir}")
        
        # Ajustar rutas si es necesario
        if current_dir.endswith('V3'):
            # Estamos en V3, usar rutas relativas
            ui_files = [
                '../UI/clients/src/components/SimulationPage/SimulationPage.jsx',
                '../UI/clients/src/components/SimulationPage/SimulationPage.css'
            ]
        else:
            # Estamos en el directorio ra√≠z
            ui_files = [
                'UI/clients/src/components/SimulationPage/SimulationPage.jsx',
                'UI/clients/src/components/SimulationPage/SimulationPage.css'
            ]
        
        for file_path in ui_files:
            if not os.path.exists(file_path):
                print(f"‚ùå Archivo UI faltante: {file_path}")
                return False
        
        print("‚úÖ Archivos de UI de simulaci√≥n est√°n presentes")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n UI: {e}")
        return False

def test_sebo_integration():
    """Prueba la integraci√≥n con Sebo"""
    print("\nüîó Probando integraci√≥n con Sebo...")
    
    try:
        # Cambiar las rutas relativas para que funcionen desde el directorio V3
        current_dir = os.getcwd()
        
        if current_dir.endswith('V3'):
            # Estamos en V3, usar rutas relativas
            sebo_files = [
                '../sebo/src/server/routes/sandboxOperationRoutes.js',
                '../sebo/src/server/controllers/sandboxOperationController.js'
            ]
        else:
            # Estamos en el directorio ra√≠z
            sebo_files = [
                'sebo/src/server/routes/sandboxOperationRoutes.js',
                'sebo/src/server/controllers/sandboxOperationController.js'
            ]
        
        for file_path in sebo_files:
            if not os.path.exists(file_path):
                print(f"‚ùå Archivo Sebo faltante: {file_path}")
                return False
        
        print("‚úÖ Archivos de integraci√≥n Sebo est√°n presentes")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en integraci√≥n Sebo: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas del sistema de simulaci√≥n V3")
    print("=" * 60)
    
    tests = [
        ("Importaciones", test_imports),
        ("Configuraci√≥n", test_simulation_config),
        ("WebSocket", test_websocket_integration),
        ("Modos de Simulaci√≥n", test_simulation_modes),
        ("Integraci√≥n UI", test_ui_integration),
        ("Integraci√≥n Sebo", test_sebo_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error ejecutando {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen de resultados
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:.<30} {status}")
        if result:
            passed += 1
    
    print("-" * 60)
    print(f"Total: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! El sistema est√° listo.")
        return True
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisar los errores arriba.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)